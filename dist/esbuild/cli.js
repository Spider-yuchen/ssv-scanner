#!/usr/bin/env node
"use strict";(()=>{var j=Object.create;var V=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var $=Object.getPrototypeOf,M=Object.prototype.hasOwnProperty;var m=(o=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(o,{get:(r,e)=>(typeof require!="undefined"?require:r)[e]}):o)(function(o){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+o+'" is not supported')});var H=(o,r,e,t)=>{if(r&&typeof r=="object"||typeof r=="function")for(let s of q(r))!M.call(o,s)&&s!==e&&V(o,s,{get:()=>r[s],enumerable:!(t=I(r,s))||t.enumerable});return o};var f=(o,r,e)=>(e=o!=null?j($(o)):{},H(r||!o||!o.__esModule?V(e,"default",{value:o,enumerable:!0}):e,o));var l=(o,r,e)=>new Promise((t,s)=>{var a=c=>{try{i(e.next(c))}catch(d){s(d)}},n=c=>{try{i(e.throw(c))}catch(d){s(d)}},i=c=>c.done?t(c.value):Promise.resolve(c.value).then(a,n);i((e=e.apply(o,r)).next())});var D=f(m("figlet"));var A={name:"ssv-scanner",version:"1.0.1",description:"Tool for retrieving events data (cluster snapshots and owner nonce) from the SSV network contract.",author:"SSV.Network",repository:"https://github.com/bloxapp/ssv-scanner",license:"MIT",keywords:["ssv","ssv.network","cluster","nonce","scanner"],main:"./dist/tsc/src/main.js",types:"./dist/tsc/src/main.d.ts",bin:{"ssv-keys":"./dist/tsc/src/cli.js"},engines:{node:">=12"},scripts:{"dev:cli":"ts-node src/cli.ts",cli:"node ./dist/tsc/src/cli.js",lint:"eslint src/ --ext .js,.jsx,.ts,.tsx",clean:"rm -rf dist build package","ts-node":"ts-node","copy-json":"cpy './src/shared/abi/*.json' './dist/tsc/src/shared/abi/'",build:"tsc -p tsconfig.json","build-all":"yarn clean && yarn build && yarn copy-json && yarn esbuild",esbuild:"node ./esbuild.js","pre-commit":"yarn test && yarn lint && yarn build-all"},devDependencies:{"@types/argparse":"^2.0.10","@types/cli-progress":"^3.11.0","@types/node":"^15.14.9","cpy-cli":"^5.0.0",esbuild:"^0.14.38","esbuild-node-externals":"^1.4.1",eslint:"^7.32.0","ts-node":"^10.9.1",typescript:"^4.6.4"},dependencies:{"@types/figlet":"^1.5.4",argparse:"^2.0.1","cli-progress":"^3.11.2",figlet:"^1.5.2",web3:"^1.10.0"},licenses:[{MIT:"SEE LICENSE IN LICENCE FILE"}]};var T=m("argparse");var P=m("argparse"),w=class{constructor(r,e){this.name=r;this.description=e;this.parser=new P.ArgumentParser({description:this.description}),this.setArguments(this.parser)}parse(r){return this.parser.parse_args(r)}};var E=f(m("cli-progress"));var _=f(m("web3"));var b=class{constructor(r,e,t){let[s,a]=e.split(".");s=s.toUpperCase(),a=a.toUpperCase();let n;try{n=m(`../shared/abi/${r}.${e}.abi.json`)}catch(c){throw console.error(`Failed to load JSON data from ${r}.${e}.abi.json`,c),c}let i;try{i=m(`../shared/abi/${r}.${e}.views.abi.json`)}catch(c){throw console.error(`Failed to load JSON data from ${r}.${e}.views.abi.json`,c),c}if(!n.contractAddress||!n.abi||!n.genesisBlock)throw new Error(`Missing core data in JSON for ${r}.${e}`);if(!i.contractAddress||!i.abi)throw new Error(`Missing views data in JSON for ${r}.${e}`);this.contract={version:s,network:a,address:n.contractAddress,addressViews:i.contractAddress,abi:n.abi,abiViews:i.abi,genesisBlock:n.genesisBlock},this.web3=new _.default(t)}get abiCore(){return this.contract.abi}get abiViews(){return this.contract.abiViews}get contractCore(){return new this.web3.eth.Contract(this.abiCore,this.contract.address)}get contractViews(){return new this.web3.eth.Contract(this.abiViews,this.contract.addressViews)}get genesisBlock(){return this.contract.genesisBlock}};var C=f(m("web3")),y=class{constructor(r){this.DAY=5400;this.WEEK=this.DAY*7;this.MONTH=this.DAY*30;if(!r.nodeUrl)throw Error("ETH1 node is required");if(!r.ownerAddress)throw Error("Cluster owner address is required");if(r.ownerAddress.length!==42)throw Error("Invalid owner address length.");if(!r.ownerAddress.startsWith("0x"))throw Error("Invalid owner address.");this.params=r,this.params.contractAddress=new C.default().utils.toChecksumAddress(this.params.contractAddress),this.params.ownerAddress=new C.default().utils.toChecksumAddress(this.params.ownerAddress)}};var v=class extends y{constructor(){super(...arguments);this.eventsList=["ValidatorAdded"]}run(e){return l(this,null,function*(){e&&(console.log(`
Scanning blockchain...`),this.progressBar=new E.default.SingleBar({},E.default.Presets.shades_classic));try{let t=yield this._getLatestNonce(e);return e&&this.progressBar.stop(),t}catch(t){throw e&&this.progressBar.stop(),new Error(t)}})}_getLatestNonce(e){return l(this,null,function*(){let t=new b(this.params.ssvSyncEnv,this.params.ssvSyncGroup,this.params.nodeUrl),s;try{s=yield t.web3.eth.getBlockNumber()}catch(g){throw new Error("Could not access the provided node endpoint.")}try{yield t.contractCore.methods.owner().call()}catch(g){throw new Error("Could not find any cluster snapshot from the provided contract address.")}let a=this.MONTH,n=0,i=t.genesisBlock,c=t.web3.eth.abi.encodeParameter("address",this.params.ownerAddress),d={fromBlock:i,toBlock:s,topics:[null,c]};e&&this.progressBar.start(s,0);do{let g;try{g=(yield t.contractCore.getPastEvents("AllEvents",d)).filter(p=>this.eventsList.includes(p.event)),n+=g.length,d.fromBlock=d.toBlock+1}catch(p){if(a===this.MONTH)a=this.WEEK;else if(a===this.WEEK)a=this.DAY;else throw new Error(p)}d.toBlock=Math.min(d.fromBlock+a,s),e&&this.progressBar.update(d.toBlock)}while(d.toBlock-d.fromBlock>0);return e&&this.progressBar.update(s,s),n})}};var S=class extends w{constructor(){super("nonce","Handles nonce operations")}setArguments(r){r.add_argument("-sse","--ssv-sync-env",{help:"The SSV sync environment (prod or stage). Default: prod",default:"prod",choices:["prod","stage"],required:!1,dest:"ssvSyncEnv"}),r.add_argument("-ssg","--ssv-sync-group",{help:"The SSV contract name (format: version.network)",choices:["v3.prater","v4.prater","v4.mainnet"],required:!0,dest:"ssvSyncGroup"}),r.add_argument("-n","--node-url",{help:"ETH1 (execution client) node endpoint url",required:!0,dest:"nodeUrl"}),r.add_argument("-oa","--owner-address",{help:"The cluster owner address (in the SSV contract)",required:!0,dest:"ownerAddress"})}run(r){return l(this,null,function*(){try{let t=yield new v(r).run(!0);console.log("Next Nonce:",t)}catch(e){console.error("\x1B[31m",e.message)}})}};var x=f(m("cli-progress"));var k=class extends y{constructor(){super(...arguments);this.eventsList=["ClusterDeposited","ClusterWithdrawn","ValidatorRemoved","ValidatorAdded","ClusterLiquidated","ClusterReactivated"]}run(e,t){return l(this,null,function*(){if(!(Array.isArray(e)&&this._isValidOperatorIds(e.length)))throw Error("Comma-separated list of operator IDs. The amount must be 3f+1 compatible.");e=[...e].sort((n,i)=>n-i),t&&(console.log(`
Scanning blockchain...`),this.progressBar=new x.default.SingleBar({},x.default.Presets.shades_classic));let a=yield this._getClusterSnapshot(e,t);return t&&this.progressBar.stop(),a})}_getClusterSnapshot(e,t){return l(this,null,function*(){let s,a=new b(this.params.ssvSyncEnv,this.params.ssvSyncGroup,this.params.nodeUrl);try{s=yield a.web3.eth.getBlockNumber()}catch(h){throw new Error("Could not access the provided node endpoint.")}try{yield a.contractCore.methods.owner().call()}catch(h){throw console.log("eee",h),new Error("Could not find any cluster snapshot from the provided contract address.")}let n=this.MONTH,i,c=0,d=a.genesisBlock,g=a.web3.eth.abi.encodeParameter("address",this.params.ownerAddress),p={fromBlock:Math.max(s-n,d),toBlock:s,topics:[null,g]};for(t&&this.progressBar.start(s,0);!i&&p.fromBlock>=d;){let h;try{h=yield a.contractCore.getPastEvents("allEvents",p),h.filter(u=>this.eventsList.includes(u.event)).filter(u=>JSON.stringify(u.returnValues.operatorIds.map(O=>+O))===JSON.stringify(e)).forEach(u=>{u.blockNumber>c&&(c=u.blockNumber,i=u.returnValues.cluster)}),p.toBlock=p.fromBlock}catch(u){console.error(u),n===this.MONTH?n=this.WEEK:n===this.WEEK&&(n=this.DAY)}p.fromBlock=p.toBlock-n,t&&this.progressBar.update(s-(p.toBlock-n))}return t&&this.progressBar.update(s,s),i=i||["0","0","0",!0,"0"],{payload:{Owner:this.params.ownerAddress,Operators:e.sort((h,u)=>h-u).join(","),Block:c||s,Data:i.join(",")},cluster:{validatorCount:i[0],networkFeeIndex:i[1],index:i[2],active:i[3],balance:i[4]}}})}_isValidOperatorIds(e){return!(e<4||e>13||e%3!=1)}};var B=class extends w{constructor(){super("cluster","Handles cluster operations")}setArguments(r){r.add_argument("-sse","--ssv-sync-env",{help:"The SSV sync environment (prod or stage). Default: prod",default:"prod",choices:["prod","stage"],required:!1,dest:"ssvSyncEnv"}),r.add_argument("-ssg","--ssv-sync-group",{help:"The SSV contract name (format: version.network)",choices:["v3.prater","v4.prater","v4.mainnet"],required:!0,dest:"ssvSyncGroup"}),r.add_argument("-n","--node-url",{help:"ETH1 (execution client) node endpoint url",required:!0,dest:"nodeUrl"}),r.add_argument("-oa","--owner-address",{help:"The cluster owner address (in the SSV contract)",required:!0,dest:"ownerAddress"}),r.add_argument("-oids","--operator-ids",{help:"Comma-separated list of operators IDs regarding the cluster that you want to query",required:!0,dest:"operatorIds"})}run(r){return l(this,null,function*(){try{let e=r.operatorIds.split(",").map(a=>{if(Number.isNaN(+a))throw new Error("Operator Id should be the number");return+a}).sort((a,n)=>a-n),s=yield new k(r).run(e,!0);console.table(s.payload),console.log("Cluster snapshot:"),console.table(s.cluster),console.log(JSON.stringify({block:s.payload.Block,"cluster snapshot":s.cluster,cluster:Object.values(s.cluster)},null,"  "))}catch(e){console.error("\x1B[31m",e.message)}})}};var L=o=>l(void 0,null,function*(){return new Promise(r=>{(0,D.default)(o,(e,t)=>{if(e)return r("");r(t)})})});function N(){return l(this,null,function*(){let o=new T.ArgumentParser,r=o.add_subparsers({title:"commands",dest:"command"}),e=new B,t=new S;e.setArguments(r.add_parser(e.name,{add_help:!0})),t.setArguments(r.add_parser(t.name,{add_help:!0}));let s=`SSV Scanner v${A.version}`,a=yield L(s);if(a){console.log(" -----------------------------------------------------------------------------------"),console.log(`${a||s}`),console.log(" -----------------------------------------------------------------------------------");for(let i of String(A.description).match(/.{1,75}/g)||[])console.log(` ${i}`);console.log(` -----------------------------------------------------------------------------------
`)}let n=o.parse_args();switch(n.command){case e.name:yield e.run(n);break;case t.name:yield t.run(n);break;default:console.error("Command not found"),process.exit(1)}})}N();})();
